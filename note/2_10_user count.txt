const food = new Set(["pizza", "love", "love"]);
Set의 keyword는 유니크함.
위 코드로 작성해도 다음과 같은 결과 나옴
food
Set(2) {"pizza", "love"}

Set의 길이 : size
food.size

//server.js
function countRoom(roomName) {
    return wsServer.sockets.adapter.rooms.get(roomName)?.size;
}
   가끔 roomName을 찾을 수도 있지만 아닐 수 있으므로 ?붙여줌.
이를 Optional chaining 이라고 함.
페이지에 존재하지 않는 요소에 접근해 요소의 정보를 가져오려 하면 문제가 발생.
?.이 추가되기 전엔 이런 문제들을 해결하기 위해 && 연산자를 사용
?.은 ?. 앞의 평가 대상이 undefined나 null이면 평가를 멈추고 undefined를 반환.


//server.js
   socket.on("enter_room", (roomName, done) => {
        socket.join(roomName);
        done();
        방에 입장할 때 몇 명인지 알려줌
        socket.to~는 나를 제외한 모두에게 브로드캐스팅하여 메시지 전달
        wsServer.to~는 나를 포함한 모두에게 브로드캐스팅.
        socket.to를 사용하면 방에 처음 입장했을 때 몇 명인지 나오지 않음.
        // socket.to(roomName).emit("welcome", socket.nickname, countRoom(roomName));
        wsServer.to(roomName).emit("welcome", socket.nickname, countRoom(roomName));
        wsServer.sockets.emit("room_change", publicRooms());
    });
    socket.on("disconnecting", () => {
        방을 떠나기 직전에 알려줌.
        아직 떠나지 않은상태임. 그러므로 -1 해줌.
        socket.rooms.forEach(room => socket.to(room).emit("bye", socket.nickname, countRoom(room) - 1));
    });

